### Código parte A###
import numpy as np
import math
import random
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.mlab as mlab
from scipy.integrate import odeint
from scipy import signal
import matplotlib.animation as animation
from matplotlib.pylab import *
from mpl_toolkits.axes_grid1 import host_subplot



fig=plt.figure()
fig.set_dpi(100)
#fig.set_size_inches(7,6.5)


# Datos a modificar en la simulacion 
# Pendulo doble

L1=0.1      #longitud del péndulo 1
L2=0.1      #longitud del pendulo 2
m1=1.0      #masa del pendulo 1
m2=1.0      #masa del pendulo 2
g=9.81      #aceleracion de la gravedad
tf=10.0     #tiempo de simulacion
m12=m1+m2


par=[L1,L2,m1,m2,m12,g]



# Definicion de las ecuaciones de movimiento del pendulo doble
def double_pendulum(z,t,par):
    z1,z2,z3,z4=z  

    sinz=np.sin(z1-z2)
    cosz=np.cos(z1-z2)
    sinz1=np.sin(z1)
    sinz2=np.sin(z2)
    z42=z4*z4
    z32=z3*z3
    coszsq=cosz*cosz

    dzdt=[z3,z4,(-m2*L1*z32*sinz*cosz+g*m2*sinz2*cosz-m2*L2*z42*sinz-m12*g*sinz1)/(L1*m12-m2*L1*coszsq),
         (m2*L2*z42*sinz*cosz+g*sinz1*cosz*m12+L1*z32*sinz*m12-g*sinz2*m12)/(L2*m12-m2*L2*coszsq)]
    return dzdt


# Llamada a odeint que resuelve las ecuaciones de movimiento

nt=10000  #numero de intervalos de tiempo
dt=tf/nt

# Valores iniciales del péndulo doble
# Angulos iniciales en grados
theta1_0_deg= 20
theta2_0_deg= 20
# Angulos iniciales en radianes
theta1_0=theta1_0_deg*np.pi/180.0
theta2_0=theta2_0_deg*np.pi/180.0

z0=[theta1_0,theta2_0,0.0,0.0] #Valores iniciales   
# Esta puesto que las velocidades angulares sean 0

 
t=np.linspace(0,tf,nt)
abserr = 1.0e-8
relerr = 1.0e-6
z=odeint(double_pendulum,z0,t,args=(par,),atol=abserr, rtol=relerr)

### Energías ###

# Energías cinéticas

T1 = []

for i in range (0, len(z)):
    T1.append(0.5 * m1 * (z[i][2]**2)*L1**2)
    
T2 = []

for i in range (0, len(z)):
    T2.append(0.5 * m2 * ((z[i][2]**2)*L1**2 + (z[i][3]**2)*L2**2 + 2*(z[i][2])*(z[i][3])*L1*L2*np.cos(z[i][0]-z[i][1])))

T = []

for i in range (0, len(z)):
    T.append(T1[i]+T2[i])

# Energías potenciales

U1 = []

for i in range (0, len(z)):
    U1.append(-m1*g*L1*np.cos(z[i][0]))
    
U2 = []

for i in range (0, len(z)):
    U2.append(-m2*g*(L1*np.cos(z[i][0])+L2*np.cos(z[i][1])))
    
U = []

for i in range (0, len(z)):
    U.append(U1[i]+U2[i])


# Energías totales

E1 = []

for i in range(0, len(z)):
    E1.append(T1[i]+U1[i])
    
E2 = []

for i in range(0, len(z)):
    E2.append(T2[i]+U2[i])
    
E = []

for i in range(0, len(z)):
    E.append(T[i]+U[i])



plt.close('all')




# Definicion del grafico
# Aqui se grafica la evolucion de los angulos theta1 y theta 2 con el tiempo

fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.set_xlabel('time (s)')
ax1.set_ylabel('$\\theta_1$(rad)', color='b', fontsize=15)
ax2.set_ylabel('$\\theta_2$(rad)', color='r', fontsize=15)
ax1.tick_params('y', colors='b')
ax2.tick_params('y', colors='r')
ax1.set_xlim(xmin=0.,xmax=tf) #limites del eje x
line1, = ax1.plot(t[:],z[:,0], linewidth=2, color='b')
line2, = ax2.plot(t[:],z[:,1], linewidth=2, color='r')


fig, ax3 = plt.subplots()
ax4 = ax3.twinx()
ax3.set_xlabel('$\\theta$ (rad)')
ax3.set_ylabel('$\\omega_1$(rad/s)', color='b', fontsize=15)
ax4.set_ylabel('$\\omega_2$(rad/s)', color='r', fontsize=15)
ax3.tick_params('y', colors='b')
ax4.tick_params('y', colors='r')
line1, = ax3.plot(z[:,0],z[:,2], linewidth=2, color='b')
line2, = ax4.plot(z[:,1],z[:,3], linewidth=2, color='r')



# Aqui se hace una animacion del movimiento del péndulo doble en
# el espacio real (x,y)

Llong=(L1+L2)*1.1

fig, ax3 = plt.subplots()
ax3 = plt.axes(xlim=(-Llong,Llong), ylim=(-Llong,Llong))
ax3.set_xlabel('x (m)')
ax3.set_ylabel('y (m)')

line1,=ax3.plot([],[],lw=2)
line2,=ax3.plot([],[],lw=2)
line3,=ax3.plot([],[],lw=1)
bob1 = plt.Circle((1, 1),Llong*0.02, fc='b')
bob2 = plt.Circle((1, 1),Llong*0.02, fc='r')
time_template = 'time = %.1fs'
time_text = ax3.text(0.05, 0.9, '', transform=ax3.transAxes)





def init():
    bob1.center = (1, 1)
    ax3.add_artist(bob1)
    bob2.center = (0,0)
    ax3.add_artist(bob2)
    line1.set_data([],[])
    line2.set_data([],[]) 
    line3.set_data([],[])
    time_text.set_text('')
    return bob1,bob2,line1,line2,line3,time_text


def animate(i):
    x1, y1 = bob1.center
    x1 = L1*np.sin(z[i,0])
    y1 = -L1*np.cos(z[i,0])
    line1.set_data((0,x1),(0,y1))
    bob1.center = (x1, y1)
    x2, y2 = bob2.center
    x2 = x1+L2*np.sin(z[i,1])
    y2 = y1-L2*np.cos(z[i,1])
    line2.set_data((x1,x2),(y1,y2))
    line3.set_data(L1*np.sin(z[0:i,0])+L2*np.sin(z[0:i,1]),-L1*np.cos(z[0:i,0])-L2*np.cos(z[0:i,1]))

    bob2.center = (x2, y2)

    time_text.set_text(time_template%(i*dt))

    return bob1,bob2,time_text

anim = animation.FuncAnimation(fig, animate, 
                               init_func=init, 
                               frames=10000,
                               interval=5)



plt.figure()
plt.plot(t,T1, label = 'T1', color = 'r')
plt.plot(t,T2, label = 'T2', color = 'b')
plt.plot(t,T, label = 'T total', color = 'y')
plt.show

plt.figure()
plt.plot(t,U1, label = 'U1', color = 'r')
plt.plot(t,U2, label = 'U2', color = 'b')
plt.plot(t,U, label = 'U total', color = 'y')
plt.show

plt.figure()
plt.plot(t,E1, label = 'E1', color = 'r')
plt.plot(t,E2, label = 'E2', color = 'b')
plt.plot(t,E, label = 'E total', color = 'y')
plt.show
