import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import matplotlib.animation as animation

fig = plt.figure()
fig.set_dpi(100)

# Datos a modificar en la simulación 
L1 = 0.1      # Longitud inicial del péndulo 1
L2 = 0.1      # Longitud inicial del péndulo 2
m1 = 1.0      # Masa del péndulo 1
m2 = 1.0      # Masa del péndulo 2
g = 9.8       # Aceleración de la gravedad
tf = 10.0      # Tiempo de simulación
m12 = m1 + m2

nt = 10000    # Número de intervalos de tiempo
dt = tf / nt
t = np.linspace(0, tf, nt)

par = [m1, m2, m12, g]

# Definición de las ecuaciones de movimiento del péndulo doble
def double_pendulum(z, t, par):
    theta1, theta2, omega1, omega2 = z
    m1, m2, m12, g = par
    A = 1
    pi = 0
    l1 = L1 + L1 / 2 * np.cos(A * t + pi)
    l2 = L2 + L2 / 2 * np.cos(A * t + pi)
    
    sinz = np.sin(theta1 - theta2)
    cosz = np.cos(theta1 - theta2)
    sinz1 = np.sin(theta1)
    sinz2 = np.sin(theta2)
    z42 = omega2 * omega2
    z32 = omega1 * omega1

    coszsq = cosz * cosz
    sol1 = (-2 * omega1 * m12 * l1 * (-L1 / 2 * np.sin(t * A + pi)) * l2 -
            m2 * omega2 * (-L1 / 2 * np.sin(t * A + pi)) * l2 ** 2 * cosz -
            m2 * omega2 * l1 * (-L2 / 2 * np.sin(t * A + pi)) * l2 * cosz -
            m2 * z42 * l1 * l2 ** 2 * sinz -
            m12 * g * l1 * l2 * sinz1 +
            m2 * g * l1 * l2 * sinz2 * cosz +
            m2 * omega2 * 2 * l2 * l1 * (-L2 / 2 * np.sin(t * A + pi)) * cosz +
            m2 * l1 * (-L1 / 2 * np.sin(t * A + pi)) * l2 * omega1 * cosz ** 2 +
            m2 * l1 ** 2 * (-L2 / 2 * np.sin(t * A + pi)) * omega1 * cosz ** 2 -
            m2 * l1 ** 2 * l2 * z32 * sinz * cosz) / \
           (m12 * l1 ** 2 * l2 - m2 * l1 ** 2 * l2 * cosz ** 2)

    dzdt = [omega1, omega2, sol1,
            (-m2 * g * l2 * sinz2 -
             m2 * omega2 * 2 * l2 * (-L2 / 2 * np.sin(t * A + pi)) -
             m2 * (-L1 / 2 * np.sin(t * A + pi)) * l2 * omega1 * cosz -
             m2 * l1 * (-L2 / 2 * np.sin(t * A + pi)) * omega1 * cosz +
             m2 * l1 * l2 * z32 * sinz -
             m2 * l1 * l2 * sol1 * cosz) / (m2 * l2 ** 2)]
    return dzdt

# Valores iniciales del péndulo doble
theta1_0_deg= 10
theta2_0_deg= 10
# Angulos iniciales en radianes
theta1_0=theta1_0_deg*np.pi/180.0
theta2_0=theta2_0_deg*np.pi/180.0

z0=[theta1_0,theta2_0,0.0,0.0] #Valores iniciales   
# Esta puesto que las velocidades angulares sean 0

 
t=np.linspace(0,tf,nt)
abserr = 1.0e-8
relerr = 1.0e-6
z=odeint(double_pendulum,z0,t,args=(par,),atol=abserr, rtol=relerr)

print(z)
plt.close('all')


# Definición del gráfico
fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.set_xlabel('time (s)')
ax1.set_ylabel('$\\theta_1$(rad)', color='b', fontsize=15)
ax2.set_ylabel('$\\theta_2$(rad)', color='r', fontsize=15)
ax1.tick_params('y', colors='b')
ax2.tick_params('y', colors='r')
ax1.set_xlim(xmin=0., xmax=tf)
line1, = ax1.plot(t[:], z[:, 0], linewidth=2, color='b')
line2, = ax2.plot(t[:], z[:, 1], linewidth=2, color='r')

fig, ax3 = plt.subplots()
ax4 = ax3.twinx()
ax3.set_xlabel('$\\theta$ (rad)')
ax3.set_ylabel('$\\omega_1$(rad/s)', color='b', fontsize=15)
ax4.set_ylabel('$\\omega_2$(rad/s)', color='r', fontsize=15)
ax3.tick_params('y', colors='b')
ax4.tick_params('y', colors='r')
line1, = ax3.plot(z[:, 0], z[:, 2], linewidth=2, color='b')
line2, = ax4.plot(z[:, 1], z[:, 3], linewidth=2, color='r')

# Animación del movimiento del péndulo doble en el espacio real (x, y)
Llong = (L1 + L2) * 1.8

fig, ax5 = plt.subplots()
ax5.set_xlim(-Llong, Llong)
ax5.set_ylim(-Llong, Llong)
ax5.set_xlabel('x (m)')
ax5.set_ylabel('y (m)')

line1, = ax5.plot([], [], lw=2)
line2, = ax5.plot([], [], lw=2)
line3, = ax5.plot([], [], lw=1)
trajectory1, = ax5.plot([], [], 'b-', lw=1, alpha=0.5)  # Estela azul para la primera masa
trajectory2, = ax5.plot([], [], 'r-', lw=1, alpha=0.5)  # Estela roja para la segunda masa
bob1 = plt.Circle((0, 0), Llong * 0.02, fc='b')
bob2 = plt.Circle((0, 0), Llong * 0.02, fc='r')
time_template = 'time = %.1fs'
time_text = ax5.text(0.05, 0.9, '', transform=ax5.transAxes)

# Inicializar listas para las trayectorias
x1_traj, y1_traj = [], []
x2_traj, y2_traj = [], []
A = 1
def init():
    bob1.center = (0, 0)
    ax5.add_artist(bob1)
    bob2.center = (0, 0)
    ax5.add_artist(bob2)
    line1.set_data([], [])
    line2.set_data([], [])
    line3.set_data([], [])
    trajectory1.set_data([], [])
    trajectory2.set_data([], [])
    time_text.set_text('')
    return bob1, bob2, line1, line2, line3, trajectory1, trajectory2, time_text

def animate(i):
    l1 = L1 + L1 / 2 * np.cos(A * t[i])
    l2 = L2 + L2 / 2 * np.cos(A * t[i])
    
    x1 = l1 * np.sin(z[i, 0])
    y1 = -l1 * np.cos(z[i, 0])
    x2 = x1 + l2 * np.sin(z[i, 1])
    y2 = y1 - l2 * np.cos(z[i, 1])
    
    x1_traj.append(x1)
    y1_traj.append(y1)
    x2_traj.append(x2)
    y2_traj.append(y2)
    
    line1.set_data((0, x1), (0, y1))
    bob1.center = (x1, y1)
    line2.set_data((x1, x2), (y1, y2))
    bob2.center = (x2, y2)
    
    trajectory1.set_data(x1_traj, y1_traj)
    trajectory2.set_data(x2_traj, y2_traj)
    
    time_text.set_text(time_template % (i * dt))
    
    return bob1, bob2, line1, line2, line3, trajectory1, trajectory2, time_text

anim = animation.FuncAnimation(fig, animate, 
                               init_func=init, 
                               frames=nt, 
                               interval=5, blit=True)

plt.show()

T = 1/2*m1*(L1**2*z[:,2]**2) + 1/2*m2*(L1**2*z[:,2]**2+L2**2*z[:,3]**2+2*L1*L2*z[0:,2]*z[0:,3]*np.cos(z[:,0]-z[:,1]))
U= -m1*g*L1*np.cos(z[:,0])-m2*g*(L1*np.cos(z[:,0])+L2*np.cos(z[:,1]))
E = T+U


fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.set_xlabel('time (s)')
ax1.set_ylabel('E(J)', color='b', fontsize=15)
plt.plot(t[:],T, linewidth=2, color='orange')
plt.plot(t[:],U, linewidth=2, color='blue')
plt.plot(t[:],E, linewidth=2, color='black')
plt.legend()
plt.show()
